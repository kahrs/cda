/* cofactor.c */	int binate_split_select();
/* cofactor.c */	int unate_split_select();
/* cofactor.c */	pcube *cofactor();
/* cofactor.c */	pcube *cube1list();
/* cofactor.c */	pcube *cube2list();
/* cofactor.c */	pcube *cube3list();
/* cofactor.c */	pcube *scofactor();
/* cofactor.c */	pcube largest_cube();
/* cofactor.c */	void massive_count();
/* compl.c */	bool compl_special_cases();
/* compl.c */	pcover compl_cube();
/* compl.c */	pcover compl_merge();
/* compl.c */	pcover complement();
/* compl.c */	void compl_d1merge();
/* compl.c */	void compl_lift();
/* contain.c */	int d1_rm_equal();
/* contain.c */	int rm2_contain();
/* contain.c */	int rm2_equal();
/* contain.c */	int rm_contain();
/* contain.c */	int rm_equal();
/* contain.c */	pset *sf_list();
/* contain.c */	pset *sf_sort();
/* contain.c */	pset_family d1merge();
/* contain.c */	pset_family sf_contain();
/* contain.c */	pset_family sf_dupl();
/* contain.c */	pset_family sf_merge();
/* contain.c */	pset_family sf_union();
/* contain.c */	pset_family sf_unlist();
/* cvrin.c */	char *get_word();
/* cvrin.c */	cube_setup();
/* cvrin.c */	pPLA read_pla();
/* cvrin.c */	pPLA set_phase();
/* cvrin.c */	void parse_pla();
/* cvrin.c */	void read_cube();
/* cvrin.c */	void skip_line();
/* cvrm.c */	bool check_consistency();
/* cvrm.c */	bool verify();
/* cvrm.c */	int ascend();
/* cvrm.c */	int d1_order();
/* cvrm.c */	int desc1();
/* cvrm.c */	int descend();
/* cvrm.c */	int lex_order();
/* cvrm.c */	pcover cb_sharp();
/* cvrm.c */	pcover cb_unravel();
/* cvrm.c */	pcover cv_intersect();
/* cvrm.c */	pcover cv_sharp();
/* cvrm.c */	pcover lex_sort();
/* cvrm.c */	pcover sharp();
/* cvrm.c */	pcover size_sort();
/* cvrm.c */	pcover unravel();
/* cvrmisc.c */	bool check_arg();
/* cvrmisc.c */	bool cost_better();
/* cvrmisc.c */	char *print_cost();
/* cvrmisc.c */	void chk_arglist();
/* cvrmisc.c */	void chk_debug();
/* cvrmisc.c */	void copy_cost();
/* cvrmisc.c */	void cover_cost();
/* cvrmisc.c */	void delete_arg();
/* cvrmisc.c */	void fatal();
/* cvrmisc.c */	void print_trace();
/* cvrmisc.c */	void size_stamp();
/* cvrmisc.c */	void totals();
/* cvrout.c */	char *fmt_cube();
/* cvrout.c */	char *pc1();
/* cvrout.c */	char *pc2();
/* cvrout.c */	char *pc3();
/* cvrout.c */	void cprint();
/* cvrout.c */	void debug1_print();
/* cvrout.c */	void debug_print();
/* cvrout.c */	void fprint_pla();
/* cvrout.c */	void sf_debug_print();
/* espresso.c */	pcover espresso();
/* essen.c */	bool essen_cube();
/* essen.c */	pcover essential();
/* expand.c */	bool feasibly_covered();
/* expand.c */	int most_frequent();
/* expand.c */	pcover expand();
/* expand.c */	pcover mini_order();
/* expand.c */	pcube select_feasible();
/* expand.c */	pset essen_parts();
/* expand.c */	void elim_lowering();
/* expand.c */	void essen_raising();
/* expand.c */	void expand1();
/* expand.c */	void mincov();
/* expand.c */	void setup_BB_CC();
/* explode.c */	pset minterms();
/* explode.c */	void explode();
/* explode.c */	void map();
/* gasp.c */	pcover expand_gasp();
/* gasp.c */	pcover irred_gasp();
/* gasp.c */	pcover reduce_gasp();
/* irred.c */	bool cube_is_covered();
/* irred.c */	bool ftaut_special_cases();
/* irred.c */	bool taut_component_reduction();
/* irred.c */	bool taut_special_cases();
/* irred.c */	bool tautology();
/* irred.c */	int find_minimum();
/* irred.c */	pcover irredundant();
/* irred.c */	pcube *mlist1();
/* irred.c */	pset_family fcube_is_covered();
/* irred.c */	pset_family ftautology();
/* irred.c */	void *mlist2();
/* irred.c */	void irred();
/* memory.c */	char *alloc();
/* memory.c */	char *mem_alloc();
/* memory.c */	void mem_free();
/* memory.c */	void mem_stats();
/* mincov.c */	int *cl_weight();
/* mincov.c */	int *sf_weight_count();
/* mincov.c */	pset minimum_cover();
/* mincov.c */	pset_family exact_minimum_cover();
/* mincov.c */	pset_family family_to_graph();
/* mincov.c */	pset_family sf_intersect();
/* mincov.c */	void clique_select();
/* mincov.c */	void greedy_select();
/* mincov.c */	void maxclique_greedy();
/* mincov.c */	void weed();
/* opo.c */	int power();
/* opo.c */	pPLA output_phase_setup();
/* opo.c */	pcover isolate();
/* opo.c */	pcube opo();
/* opo.c */	void allphase();
/* opo.c */	void minall();
/* opo.c */	void phase_assignment();
/* pair.c */	pPLA set_pair();
/* pair.c */	pcover delvar();
/* pair.c */	pcover pairvar();
/* pair.c */	pset_family sf_delcol();
/* pop.c */	bool pop_expand();
/* pop.c */	bool pop_reduce();
/* ptime.c */	char *print_time();
/* ptime.c */	double ptime();
/* reduce.c */	bool sccc_special_cases();
/* reduce.c */	pcover mv_reduce();
/* reduce.c */	pcover order_reduce();
/* reduce.c */	pcover reduce();
/* reduce.c */	pcube reduce_cube();
/* reduce.c */	pcube sccc();
/* reduce.c */	pcube sccc_cube();
/* reduce.c */	pcube sccc_merge();
/* set.c */	bool setp_disjoint();
/* set.c */	bool setp_empty();
/* set.c */	bool setp_equal();
/* set.c */	bool setp_implies();
/* set.c */	char *ps1();
/* set.c */	int *sf_count();
/* set.c */	int set_dist();
/* set.c */	int set_ord();
/* set.c */	pset set_adjcnt();
/* set.c */	pset set_and();
/* set.c */	pset set_clear();
/* set.c */	pset set_copy();
/* set.c */	pset set_diff();
/* set.c */	pset set_fill();
/* set.c */	pset set_merge();
/* set.c */	pset set_or();
/* set.c */	pset set_xor();
/* set.c */	pset_family read_set_family();
/* set.c */	pset_family sf_active();
/* set.c */	pset_family sf_addset();
/* set.c */	pset_family sf_append();
/* set.c */	pset_family sf_copy();
/* set.c */	pset_family sf_inactive();
/* set.c */	pset_family sf_join();
/* set.c */	pset_family sf_new();
/* set.c */	pset_family sf_save();
/* set.c */	void sf_delset();
/* set.c */	void sf_free();
/* set.c */	void sf_print();
/* set.c */	void write_set_family();
/* setc.c */	bool ccommon();
/* setc.c */	bool cdist0();
/* setc.c */	bool consensus();
/* setc.c */	bool full_row();
/* setc.c */	int cdist();
/* setc.c */	int cdist01();
/* setc.c */	pset force_lower();
